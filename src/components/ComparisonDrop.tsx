"use client";
import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2, FileJson, UploadCloud } from "lucide-react";
import { toast } from "sonner";

// Interface for WER/CER results
interface WerCerMetrics {
    wer?: number;
    mer?: number;
    wil?: number;
    cer?: number;
    hits?: number;
    substitutions?: number;
    deletions?: number;
    insertions?: number;
    reference_length_words?: number;
    hypothesis_length_words?: number;
    error?: string;
    details?: string;
}

// Props for WerComparison, including hypothesisText
interface WerComparisonProps {
    hypothesisText: string | null; // Text generated by the transcription process
}

// Dropzone for JSON/TXT file (reusable)
const JsonDropzone = ({ onDrop, file, label }: { onDrop: (acceptedFiles: File[]) => void, file: File | null, label: string }) => {
    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: { 'application/json': ['.json'], 'text/plain': ['.txt'] },
        multiple: false,
    });

    return (
        <div
            {...getRootProps()}
            className={`p-6 border-2 border-dashed rounded-lg cursor-pointer text-center transition-colors
                ${isDragActive ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30' : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'}
                ${file ? 'border-green-500 bg-green-50 dark:bg-green-900/30' : ''}`}
        >
            <input {...getInputProps()} />
            <UploadCloud className="mx-auto h-10 w-10 text-gray-400 mb-2" />
            {file ? (
                <div className="text-sm text-green-700 dark:text-green-300">
                    <FileJson className="inline-block mr-1 h-4 w-4" />
                    {file.name}
                </div>
            ) : isDragActive ? (
                <p className="text-sm text-blue-600 dark:text-blue-300">Drop the {label} file here...</p>
            ) : (
                <p className="text-sm text-gray-500 dark:text-gray-400">Drag & drop {label} file, or click</p>
            )}
        </div>
    );
};

// Main Component for WER/CER Calculation
const WerComparison = ({ hypothesisText }: WerComparisonProps) => { // Accept hypothesisText prop
    const [referenceJsonFile, setReferenceJsonFile] = useState<File | null>(null);
    const [result, setResult] = useState<WerCerMetrics | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [showDebug, setShowDebug] = useState(false); // Add debug toggle

    const onDropReferenceJson = useCallback((acceptedFiles: File[]) => {
        if (acceptedFiles.length > 0) {
            setReferenceJsonFile(acceptedFiles[0]);
            setResult(null);
        }
    }, []);

    // Helper to extract text from JSON or TXT file
    const extractTextFromFile = async (file: File): Promise<string> => {
        const textContent = await file.text();
        if (file.type === 'application/json') {
            try {
                const data = JSON.parse(textContent);
                // Adapt based on expected JSON structure (similar to python script)
                if (Array.isArray(data) && data.every(seg => typeof seg.text === 'string')) {
                    return data.map(seg => seg.text).join(' ').trim();
                } else if (data.segments && Array.isArray(data.segments)) {
                    return data.segments.map((seg: any) => seg.text).join(' ').trim();
                } else if (data.transcription && Array.isArray(data.transcription)) {
                     return data.transcription.map((seg: any) => seg.text).join(' ').trim();
                } else if (typeof data.text === 'string') {
                    return data.text.trim();
                }
                // Fallback if structure is unknown but it's valid JSON
                console.warn("Unknown JSON structure. Treating as plain text.");
                return textContent.trim();
            } catch (e) {
                // If JSON parsing fails, treat as plain text
                console.warn("File is not valid JSON. Treating as plain text.");
                return textContent.trim();
            }
        } else {
            // Assume plain text for other types (like .txt)
            return textContent.trim();
        }
    };

    const handleCompare = async () => {
        if (!referenceJsonFile) {
            toast.error("Please upload the reference transcript file (JSON or TXT).");
            return;
        }
        
        // Debug check - make this visible in UI
        if (!hypothesisText) {
            toast.error("Hypothesis transcript is not available. Please transcribe a file first.");
            console.error("No hypothesis text available for comparison");
            setShowDebug(true); // Show debug info
            return;
        } else {
            console.log("Hypothesis text available:", hypothesisText.substring(0, 100) + "...");
        }

        setIsLoading(true);
        setResult(null);

        // --- Step 1: Read reference text ---
        let referenceText = '';
        try {
            referenceText = await extractTextFromFile(referenceJsonFile);
            if (!referenceText) {
                toast.warning("Reference text appears to be empty.");
            }
        } catch (error: any) {
            console.error("Failed to read reference file:", error);
            toast.error(`Failed to read reference file: ${error.message}`);
            setResult({ error: `Failed to read reference file: ${error.message}` });
            setIsLoading(false);
            return;
        }

        // --- Step 2: Use hypothesis text from prop ---
        // hypothesisText is already available from props

        // --- Step 3: Call comparison API ---
        toast.info("Calculating WER/CER...");
        try {
            console.log("Sending comparison request with texts", {
                referenceTextLength: referenceText.length,
                hypothesisTextLength: hypothesisText.length
            });
            
            const compareResponse = await fetch('/api/compare-transcripts', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    referenceText: referenceText,
                    hypothesisText: hypothesisText, // Use text from prop
                }),
            });

            const compareResult: WerCerMetrics = await compareResponse.json();

            if (!compareResponse.ok) {
                throw new Error(compareResult.error || `Comparison failed: ${compareResponse.statusText}`);
            }

            setResult(compareResult);
            toast.success("WER/CER calculation complete!");

        } catch (error: any) {
            console.error("Comparison step failed:", error);
            toast.error(`Comparison step failed: ${error.message}`);
            setResult({ error: `Comparison step failed: ${error.message}` });
        } finally {
            setIsLoading(false);
        }
    };

    const formatMetric = (value: number | undefined): string => {
        if (value === undefined || value === null) return 'N/A';
        // Format WER/MER/CER/WIL as percentages
        if (['wer', 'mer', 'wil', 'cer'].some(key => result && key in result && result[key as keyof WerCerMetrics] === value)) {
             return `${(value * 100).toFixed(2)}%`;
        }
        return value.toString();
    }

    return (
        <Card className="w-full max-w-4xl mx-auto">
            <CardHeader>
                <CardTitle className="text-xl font-semibold text-foreground">Calculate Transcription Accuracy (WER/CER)</CardTitle>
                <p className="text-sm text-muted-foreground">
                    Compare a reference transcript file against the hypothesis generated from the media above.
                </p>
                {showDebug && (
                    <div className="mt-2 p-2 bg-red-50 dark:bg-red-900/30 text-red-800 dark:text-red-300 text-xs rounded">
                        <strong>Debug:</strong> Hypothesis text available: {hypothesisText ? 'Yes' : 'No'}, 
                        Reference file: {referenceJsonFile ? 'Uploaded' : 'Not uploaded'}
                    </div>
                )}
            </CardHeader>
            <CardContent className="space-y-6">
                {/* Single Dropzone centered or adjusted */}
                <div className="flex justify-center">
                    <div className="w-full md:w-1/2"> {/* Adjust width as needed */}
                        <JsonDropzone onDrop={onDropReferenceJson} file={referenceJsonFile} label="Reference Transcript (JSON/TXT)" />
                    </div>
                </div>

                <div className="text-center">
                    <Button 
                        onClick={handleCompare} 
                        disabled={isLoading || !referenceJsonFile || !hypothesisText}
                        className={`${!hypothesisText ? 'bg-red-500 hover:bg-red-600' : ''}`}
                    >
                        {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                        {isLoading ? 'Calculating...' : 'Calculate Accuracy'}
                    </Button>
                    {!hypothesisText && !isLoading && (
                        <p className="text-xs text-red-500 mt-2 font-bold">Transcribe a media file above to enable comparison.</p>
                    )}
                </div>

                {/* Display results */}
                {result && (
                    <div className="mt-6">
                        <h3 className="text-lg font-medium mb-3 text-center">Accuracy Results</h3>
                        {result.error ? (
                            <div className="text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-md p-4 text-center">
                                <p><strong>Error:</strong> {result.error}</p>
                                {result.details && <p className="text-sm mt-1">Details: {result.details}</p>}
                            </div>
                        ) : (
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead className="w-[200px]">Metric</TableHead>
                                        <TableHead>Value</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    <TableRow>
                                        <TableCell className="font-medium">Word Error Rate (WER)</TableCell>
                                        <TableCell>{formatMetric(result.wer)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Character Error Rate (CER)</TableCell>
                                        <TableCell>{formatMetric(result.cer)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Match Error Rate (MER)</TableCell>
                                        <TableCell>{formatMetric(result.mer)}</TableCell>
                                    </TableRow>
                                     <TableRow>
                                        <TableCell className="font-medium">Word Information Lost (WIL)</TableCell>
                                        <TableCell>{formatMetric(result.wil)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Hits</TableCell>
                                        <TableCell>{formatMetric(result.hits)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Substitutions</TableCell>
                                        <TableCell>{formatMetric(result.substitutions)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Deletions</TableCell>
                                        <TableCell>{formatMetric(result.deletions)}</TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell className="font-medium">Insertions</TableCell>
                                        <TableCell>{formatMetric(result.insertions)}</TableCell>
                                    </TableRow>
                                     <TableRow>
                                        <TableCell className="font-medium">Reference Length (Words)</TableCell>
                                        <TableCell>{formatMetric(result.reference_length_words)}</TableCell>
                                    </TableRow>
                                     <TableRow>
                                        <TableCell className="font-medium">Hypothesis Length (Words)</TableCell>
                                        <TableCell>{formatMetric(result.hypothesis_length_words)}</TableCell>
                                    </TableRow>
                                </TableBody>
                            </Table>
                        )}
                    </div>
                )}
            </CardContent>
        </Card>
    );
};

// Export the correct component
export default WerComparison;

